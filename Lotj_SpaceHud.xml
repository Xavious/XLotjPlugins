<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, June 26, 2018, 9:57 PM -->
<!-- MuClient version 4.94 -->

<!-- Plugin "LotjSpaceHud" generated by Plugin Wizard -->

<muclient>
<plugin
   name="LotjSpaceHud"
   author="Xavious"
   id="3eb4fb0bc0a962e93c283a74"
   language="Lua"
   purpose="Create an Eve like space hud"
   save_state="y"
   date_written="2018-06-26 21:54:30"
   requires="4.94"
   version="1.0"
   >
<description trim="y">
<![CDATA[
` _________                           ___ ___           .___
 /   _____/__________    ____  ____  /   |   \ __ __  __| _/
 \_____  \\____ \__  \ _/ ___\/ __ \/    ~    \  |  \/ __ | 
 /        \  |_> > __ \\  \__\  ___/\    Y    /  |  / /_/ | 
/_______  /   __(____  /\___  >___  >\___|_  /|____/\____ | 
        \/|__|       \/     \/    \/       \/            \/ 
                A MUSHclient plugin for Legends of the Jedi
                                        Created By: Xavious
-----------------------------------------------------------
                     STANDARD COMMANDS
-----------------------------------------------------------
spacehelp            - Display this help screen
hidespace            - Hide the mini window
showspace            - Show the mini window
-----------------------------------------------------------
                     MOUSE INTERACTIONS
-----------------------------------------------------------
MouseWheel Scrolling - Available from top left X field to 
                     - the bottom right of window

Left Click Fields    - Sort ships by Type, Name, Proximity,
                     - Position, or Velocity

Right Click Ships    - Contextually status, target, or 
                     - locate a target ship

Left Click Ships     - Contextually calculate a jump to 
                     - its exact location.
-----------------------------------------------------------
                    DEBUGGING COMMANDS
-----------------------------------------------------------
dumpships            - Recursively print the ship tables
                     - to the screen

clearships           - Purge the ships tables
spacedebug <1/0>     - Turn debugging on (1) or off (0)
-----------------------------------------------------------
]]>
</description>
</plugin>
<!--  Get our standard constants -->
<include name="constants.lua"/>
<!--   Triggers    --> 
<triggers>
  <trigger
   enabled="y"
   name="shipRadar"
   group="captureSpace"
   match="^(?P<ship_line>(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\'  (?P<ship_x>[0-9\-]+) (?P<ship_y>[0-9\-]+) (?P<ship_z>[0-9\-]+))$"
   regexp="y"
   script="triggerShipRadar"
   sequence="100"
  />
  <trigger
  enabled="y"
  name="projectileRadar"
  group="captureSpace"
  match="^(?P<ship_line>(?P<ship_name>A Heavy Rocket|A Concussion missile|A Torpedo)  (?P<ship_x>[0-9\-]+) (?P<ship_y>[0-9\-]+) (?P<ship_z>[0-9\-]+))$"
  regexp="y"
  script="triggerProjectileRadar"
  sequence="100"
 />
  <trigger
  enabled="y"
  name="fleetRadar"
  group="captureSpace"
  match="^L\[((?P<ship_leader_type>[a-zA-Z0-9 \-]+) \'(?P<ship_leader_name>[a-zA-Z0-9 ]+)\'|(Unknown) |(None    )|[ ]+)\]:P\[(?P<ship_position>[a-zA-Z]+)[ ]*\] (?P<ship_line>(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\'  (?P<ship_x>[0-9\-]+) (?P<ship_y>[0-9\-]+) (?P<ship_z>[0-9\-]+))$"
  regexp="y"
  script="triggerFleetRadar"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipProximity"
  group="captureSpace"
  match="^(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\'[ ]+Prox: (?P<ship_proximity>[0-9]+)$"
  regexp="y"
  script="triggerShipProximity"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="projectileProximity"
  group="captureSpace"
  match="^(?P<ship_name>A Heavy Rocket|A Concussion missile|A Torpedo)[ ]+Prox: (?P<ship_proximity>[0-9]+)$"
  regexp="y"
  script="triggerProjectileProximity"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipVelocity"
  group="captureSpace"
  match="^(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\'[ ]+Velocity: (?P<ship_velocity>[0-9]+)$"
  regexp="y"
  script="triggerShipVelocity"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="projectileVelocity"
  group="captureSpace"
  match="^(?P<ship_name>A Heavy Rocket|A Concussion missile|A Torpedo)[ ]+Velocity: (?P<ship_velocity>[0-9]+)$"
  regexp="y"
  script="triggerProjectileVelocity"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="myCoordinates"
  group="captureSpace"
  match="^Your Coordinates: (?P<my_x>[0-9 \-]+) (?P<my_y>[0-9 \-]+) (?P<my_z>[0-9 \-]+)$"
  regexp="y"
  script="triggerMyCoordinates"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipLaunches"
  group="captureSpace"
  match="^(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\' launches from the surface of [a-z A-Z]+, entering the starsystem at (?P<ship_x>[0-9\-]+) (?P<ship_y>[0-9\-]+) (?P<ship_z>[0-9\-]+)$"
  regexp="y"
  script="triggerShipLaunches"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipEnterSystem"
  group="captureSpace"
  match="^(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\' enters the starsystem, coming out of its hyperjump at (?P<ship_x>[0-9\-]+) (?P<ship_y>[0-9\-]+) (?P<ship_z>[0-9\-]+)$"
  regexp="y"
  script="triggerShipEntersSystem"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipLands"
  group="captureSpace"
  match="^(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\' lands on the surface of [0-9a-z A-Z\-]+, disappearing from your scanner.$"
  regexp="y"
  script="triggerShipLands"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipLeavesSystem"
  group="captureSpace"
  match="^(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\'s hyperdrive engines flare as it initiates a hyperjump, disappearing into the distance as a streak of light.$"
  regexp="y"
  script="triggerShipLeavesSystem"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipExplodes"
  group="captureSpace"
  match="^(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\' explodes in a blinding flash of light!$"
  regexp="y"
  script="triggerShipExplodes"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipTractored"
  group="captureSpace"
  match="^(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\' is pulled into a hangar on (?P<ship_leader_type>[a-zA-Z0-9 \-]+) \'(?P<ship_leader_name>[a-zA-Z0-9 ]+)\', disappearing from your scanner.$"
  regexp="y"
  script="triggerShipTractored"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipHangarLaunch"
  group="captureSpace"
  match="^(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\' launches from a hangar on (?P<ship_leader_type>[a-zA-Z0-9 \-]+) \'(?P<ship_leader_name>[a-zA-Z0-9 ]+)\', entering the starsystem at (?P<ship_x>[0-9\-]+) (?P<ship_y>[0-9\-]+) (?P<ship_z>[0-9\-]+)$"
  regexp="y"
  script="triggerShipHangarLaunch"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipHangarLand"
  group="captureSpace"
  match="^(?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\' lands in a hangar on (?P<ship_leader_type>[a-zA-Z0-9 \-]+) \'(?P<ship_leader_name>[a-zA-Z0-9 ]+)\', disappearing from your scanner.$"
  regexp="y"
  script="triggerShipHangarLand"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipJumps"
  group="captureSpace"
  match="^The ship lurches slightly as it makes the jump to lightspeed.$"
  regexp="y"
  script="triggerHyperspace"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipExitsHyperspace"
  group="captureSpace"
  match="^The ship lurches slightly as it comes out of hyperspace.$"
  regexp="y"
  script="triggerMyShipEntersSystem"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="myShipLands"
  group="captureSpace"
  match="^Landing sequence complete.$"
  regexp="y"
  script="triggerLand"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="readout"
  group="captureSpace"
  match="^Speed: (?P<ship_speed>[0-9]+)  Fuel Level: (?P<ship_fuel>[0-9]+)%  Coords: (?P<ship_x>[0-9\-]+) (?P<ship_y>[0-9\-]+) (?P<ship_z>[0-9\-]+)$"
  regexp="y"
  script="triggerMyShipUpdate"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="proximityAlert"
  group="captureSpace"
  match="^    Proximity alert: (?P<ship_type>[a-zA-Z0-9 \-]+) \'(?P<ship_name>[a-zA-Z0-9 ]+)\'  (?P<ship_x>[0-9\-]+) (?P<ship_y>[0-9\-]+) (?P<ship_z>[0-9\-]+)$"
  regexp="y"
  script="triggerProximityAlert"
  sequence="100"
  />
  <trigger
  enabled="y"
  name="shipLaunch"
  group="shipLaunch"
  match="^Launch complete.$"
  regexp="y"
  script="triggerMyShipLaunches"
  sequence="100"
  />
</triggers>
<!--  Aliases  -->
<aliases>
  <alias
   script="OnHelp"
   match="spacehelp"
   enabled="y"
  >
  </alias>
  <alias 
   name="dumpShips" 
   match="dumpships" 
   script="dumpShips" 
   enabled="y" 
   group="debug" 
   ignore_case="y" 
   sequence="100" />
  <alias 
   name="clearShips" 
   match="clearships" 
   script="clearShips" 
   enabled="y" 
   group="debug" 
   ignore_case="y" 
   sequence="100" />
  <alias 
   name="showSpace" 
   match="showspace" 
   script="showWindow" 
   enabled="y" 
   group="debug" 
   ignore_case="y" 
   sequence="100" />
  <alias 
   name="hideSpace" 
   match="hidespace" 
   script="hideWindow" 
   enabled="y" 
   group="debug" 
   ignore_case="y" 
   sequence="100" />
  <alias 
   name="debug" 
   match="spacedebug (?P<debug>[0-1])" 
   script="setDebug" 
   enabled="y" 
   group="debug"
   regexp="y" 
   ignore_case="y" 
   sequence="100" />
</aliases>


<!--  Script  -->
<script>
<![CDATA[
require "movewindow"
require "copytable"
require "serialize"
require "tprint"
require "pairsByKeys"

SetOption("enable_triggers", true)
SetOption("enable_scripts", true)


-- default config
local config = {  
  height = 500,
  width = 931,
  backcolor = "black",
  debug = 0
  }

-- Random initialization variables
local win = "win_" .. GetPluginID()  -- unique window name
local font = "f"
local default_font_name = GetInfo(20)
local default_font_size = GetInfo(243)
local font_name = GetVariable("font_name") or default_font_name
local font_size = tonumber(GetVariable("font_size")) or default_font_size
local hide_window = 0

-- Ship tracking
local ships = {}
local ship_candidates = {}
local my_ship = {}
local ship_count = 0
local rocket_count = 0
local missile_count = 0
local torpedo_count = 0

--Scrolling variables
local WINDOW_LINES = 31
local SCROLL_BACKGROUND_COLOUR = 0xE8E8E8
local SCROLL_BAR_COLOUR = 0x111111
local SCROLL_DETAIL_COLOUR = 0x000000
local SCROLL_BAR_WIDTH = 15
local TITLE_HEIGHT = 21
local keep_scrolling = ""
local scroll_position = 1
local SCROLL_WHEEL_HOTSPOT = "ScrollWheelHotspot"
local line_start = math.max(1, #ships-WINDOW_LINES+2)

-- Pixel widths for the various fields. Padding is used to put blank space between fields.
local text_width = GetInfo(240)
local text_height = GetInfo(241)

local ship_type_field_width = 225
local ship_name_field_width = 150
local ship_coordinate_field_width = 60
local ship_proximity_field_width = 70
local ship_position_field_width = 70
local ship_velocity_field_width = 57
local field_padding = 20

--Sorting variables
local sort_by = "none"
local sort_by_type_invert = -1
local sort_by_name_invert = -1
local sort_by_proximity_invert = -1
local sort_by_position_invert = -1
local sort_by_velocity_invert = -1

function setDebug(name, line, wildcards)
  config.debug = tonumber(wildcards.debug)
  if config.debug == 1 then
    print("Turning debugging mode: ON")
  else
    print("Turning debugging mode: OFF")
  end
end

function debug(message)
  if config.debug == 1 then
    print(message)
  end

end

--Hotspot field sorting functions. Uses a hacky negative multiplier to toggle, which avoids needing a huge nested if/else chain.
function sortShipType()
  sort_by = "type"
  sort_by_type_invert = sort_by_type_invert * -1
  debug("Sort by type")
  updateHud()
end

function sortShipName()
  sort_by = "name"
  sort_by_name_invert = sort_by_name_invert * -1
  debug("Sort by name")
  updateHud()
end

function sortShipProximity()
  sort_by = "proximity"
  sort_by_proximity_invert = sort_by_proximity_invert * -1
  debug("Sort by proximity")
  updateHud()
end

function sortShipPosition()
  sort_by = "position"
  sort_by_position_invert = sort_by_position_invert * -1
  debug("Sort by position")
  updateHud()
end

function sortShipVelocity()
  sort_by = "velocity"
  sort_by_position_invert = sort_by_velocity_invert * -1
  debug("Sort by velocity")
  updateHud()
end

function targetShip(flags, hotspot_id)
  debug("targetShip - "..hotspot_id)
  --Check if left click
  if flags == 16 then
    Send('calculate local '..ships[hotspot_id].x..' '..ships[hotspot_id].y..' '..ships[hotspot_id].z)
  end
  --Check if right click, and throw up a menu.
  if flags == 32 then
    local result = WindowMenu (win, 
      WindowInfo (win, 14), -- mouse-click position (X)
      WindowInfo (win, 15), -- mouse-click position (Y)
      "^"..ships[hotspot_id].type.." '"..ships[hotspot_id].name.."'|-|Scan|Locate|-|^Combat|-|Target|Battlegroup Target"
    )
    if result == "Scan" then
      Send('status "'..hotspot_id..'"')
    elseif result == "Target" then
      Send('target "'..hotspot_id..'"')
    elseif result == "Locate" then
      Send('locateship '..ships[hotspot_id].type.." '"..ships[hotspot_id].name.."'")
    elseif result == "Battlegroup Target" then
      Send('battlegroup nav all target "'..hotspot_id..'"')
    end
  end

end

function updateHud()
  --Build a sorted table based off the selected field, defaulting to ship type. Includes ability to toggle invert.
  sorted_ships = {}
  if sort_by == "proximity" then
    for _,v in pairs(ships) do
      table.insert(sorted_ships, v)
    end
    table.sort(sorted_ships, function(a,b)
      if sort_by_proximity_invert < 0 then
        if a.proximity ~= '?' then
          return tonumber(a.proximity) < tonumber(b.proximity)
        else
          return a.proximity < b.proximity
        end
      else
        if a.proximity ~= '?' then
          return tonumber(a.proximity) > tonumber(b.proximity)
        else
          return a.proximity > b.proximity
        end
      end
    end)
  elseif sort_by == "name" then
    for _,v in pairs(ships) do
      table.insert(sorted_ships, v)
    end
    table.sort(sorted_ships, function(a,b)
      if sort_by_name_invert < 0 then
        return a.name < b.name
      else
        return a.name > b.name
      end
    end)
  elseif sort_by == "position" then
    for _,v in pairs(ships) do
      table.insert(sorted_ships, v)
    end
    table.sort(sorted_ships, function(a,b)
      if sort_by_position_invert < 0 then
        return a.position < b.position
      else
        return a.position > b.position
      end
    end)
  elseif sort_by == "velocity" then
    for _,v in pairs(ships) do
      table.insert(sorted_ships, v)
    end
    table.sort(sorted_ships, function(a,b)
      if sort_by_velocity_invert < 0 then
        return a.velocity < b.velocity
      else
        return a.velocity > b.velocity
      end
    end)
  else
    for _,v in pairs(ships) do
      table.insert(sorted_ships, v)
    end
    table.sort(sorted_ships, function(a,b)
      if sort_by_type_invert < 0 then
        return a.type < b.type
      else
        return a.type > b.type
      end
    end)
  end

  --This monsterous block builds out the table on the miniwindow with its corresponding hotspots for sorting, right+click ship selection, etc.
  drawWindow()
  debug("Building HUD")
  --Iterate through the ship list
  debug("scroll_position:"..scroll_position)
  debug("tablesize:"..#sorted_ships)
  ship_count = #sorted_ships
  for i = scroll_position, ship_count do
    ship_type_color = "dodgerblue"
    ship_name_color = "cyan"
    --Check for projectiles and remove the trailing numbers that were necessary to uniquely index each one, and color them red
    if sorted_ships[i].type == "Projectile" then
      sorted_ships[i].name = string.gsub(sorted_ships[i].name, "(%d+)", "")
      ship_type_color = "red"
      ship_name_color = "red"
    end
    left_position = 5
    WindowText(win, font,
    sorted_ships[i].type,
    left_position,
    top_position,
    left_position + ship_type_field_width + field_padding,
    top_position + text_height,
    ColourNameToRGB(ship_type_color)
    )
    WindowRectOp(win, 1, left_position - 3, top_position - 1, left_position + ship_type_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
    left_position = left_position + ship_type_field_width + field_padding

    WindowText(win, font,
    sorted_ships[i].name,
    left_position,
    top_position,
    left_position + ship_name_field_width + field_padding,
    top_position + text_height,
    ColourNameToRGB(ship_name_color)
    )
    WindowRectOp(win, 1, left_position - 3, top_position - 1, left_position + ship_name_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
    WindowAddHotspot(win, sorted_ships[i].name, left_position - 3, top_position - 1, left_position + ship_name_field_width + field_padding - 1, top_position + text_height, "", "", "targetShip", "", "", "", 1, 0)
    left_position = left_position + ship_name_field_width + field_padding

    WindowText(win, font,
    sorted_ships[i].x,
    left_position,
    top_position,
    left_position + ship_coordinate_field_width + field_padding,
    top_position + text_height,
    ColourNameToRGB("red")
    )
    WindowRectOp(win, 1, left_position - 3, top_position - 1, left_position + ship_coordinate_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
    left_position = left_position + ship_coordinate_field_width + field_padding
    
    WindowText(win, font,
    sorted_ships[i].y,
    left_position,
    top_position,
    left_position + ship_coordinate_field_width + field_padding,
    top_position + text_height,
    ColourNameToRGB("red")
    )
    WindowRectOp(win, 1, left_position - 3, top_position - 1, left_position + ship_coordinate_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
    left_position = left_position + ship_coordinate_field_width + field_padding

    WindowText(win, font,
    sorted_ships[i].z,
    left_position,
    top_position,
    left_position + ship_coordinate_field_width + field_padding,
    top_position + text_height,
    ColourNameToRGB("red")
    )
    WindowRectOp(win, 1, left_position - 3, top_position - 1, left_position + ship_coordinate_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
    left_position = left_position + ship_coordinate_field_width + field_padding

    WindowText(win, font,
    sorted_ships[i].proximity,
    left_position,
    top_position,
    left_position + ship_proximity_field_width + field_padding,
    top_position + text_height,
    ColourNameToRGB("yellow")
    )
    WindowRectOp(win, 1, left_position - 3, top_position - 1, left_position + ship_proximity_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
    left_position = left_position + ship_proximity_field_width + field_padding

    WindowText(win, font,
    sorted_ships[i].position,
    left_position,
    top_position,
    left_position + ship_position_field_width + field_padding,
    top_position + text_height,
    ColourNameToRGB("darkviolet")
    )
    WindowRectOp(win, 1, left_position - 3, top_position - 1, left_position + ship_position_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
    left_position = left_position + ship_position_field_width + field_padding

    WindowText(win, font,
    sorted_ships[i].velocity,
    left_position,
    top_position,
    left_position + ship_velocity_field_width + field_padding,
    top_position + text_height,
    ColourNameToRGB("darkorange")
    )
    WindowRectOp(win, 1, left_position - 3, top_position - 1, left_position + ship_velocity_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
    left_position = left_position + ship_velocity_field_width + field_padding

    top_position = top_position + text_height
  end
end --updateHud

function MouseOver()
  debug("MouseOver")
end

function CancelMouseOver()
  debug("CancelMouseOver")
end

function MouseDown(flags, hotspot_id)
  debug("MouseDown")
  if (hotspot_id == "scroll_up") then
    keep_scrolling = "scroll_up"
    debug("scroll up button")
    if scroll_position > 1 then
        scroll_position = scroll_position - 1
    end
  elseif (hotspot_id =="scroll_down") then
    keep_scrolling = "scroll_down"
    debug("scroll down button")
    if scroll_position < ship_count - 29 then
      keep_scrolling = true
        scroll_position = scroll_position + 1
    end
  end
end

function CancelMouseDown()
  debug("CancelMouseDown")
  keep_scrolling = ""
  updateHud()
end

function MouseUp()
  debug("MouseUp")
  keep_scrolling = ""
  updateHud()
end

function wheelMove (flags, hotspot_id)
  debug("wheelMove")
  if bit.band (flags, miniwin.wheel_scroll_back) ~= 0 then
    debug("scroll down")
    if scroll_position < ship_count - 29 then
      scroll_position = scroll_position + 1
    end
  else
    debug("scroll up")
    if scroll_position > 1 then
      scroll_position = scroll_position - 1
    end
  end
  debug("scroll_position:"..scroll_position)
  updateHud()
end

function drawScrollbars(name, line, args)
  WindowAddHotspot(win, SCROLL_WHEEL_HOTSPOT,
  ship_type_field_width + ship_name_field_width + (field_padding *2), TITLE_HEIGHT*2, config.width - SCROLL_BAR_WIDTH, config.height,
  "", -- MouseOver
  "", -- CancelMouseOver
  "", -- MouseDown
  "", -- CancelMouseDown
  "MouseUpInClient", -- MouseUp
  "", -- TooltipText
  miniwin.cursor_ns_arrow,
  0)  -- Flags
  WindowScrollwheelHandler(win, SCROLL_WHEEL_HOTSPOT, "wheelMove");

  WindowAddHotspot(win, "scroll_up", config.width-SCROLL_BAR_WIDTH, TITLE_HEIGHT, config.width-2, TITLE_HEIGHT+SCROLL_BAR_WIDTH, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)
  WindowAddHotspot(win, "scroll_down", config.width-SCROLL_BAR_WIDTH, config.height-(2*SCROLL_BAR_WIDTH), config.width-2, config.height-SCROLL_BAR_WIDTH, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)
  
  -- right Scrollbar base
  WindowRectOp(win, 2, config.width-SCROLL_BAR_WIDTH, TITLE_HEIGHT, config.width-2, config.height-2, SCROLL_BACKGROUND_COLOUR) -- scroll bar background
  WindowRectOp(win, 1, config.width-SCROLL_BAR_WIDTH+1, SCROLL_BAR_WIDTH+TITLE_HEIGHT+1, config.width-2-1, config.height-(SCROLL_BAR_WIDTH * 2), SCROLL_DETAIL_COLOUR) -- scroll bar background inset rectangle

  
  -- draw right scrollbar up and down arrows
  if (keep_scrolling == "scroll_up") then
    -- draw top scroll button pressed
    WindowRectOp(win, 5, (config.width-SCROLL_BAR_WIDTH), TITLE_HEIGHT, 0, TITLE_HEIGHT+SCROLL_BAR_WIDTH, 10,  15 + 0x800) -- up arrow pushed
    points = string.format("%i,%i,%i,%i,%i,%i", (config.width-SCROLL_BAR_WIDTH)+3, TITLE_HEIGHT+9,(config.width-SCROLL_BAR_WIDTH)+7, TITLE_HEIGHT+5,(config.width-SCROLL_BAR_WIDTH)+11, TITLE_HEIGHT+9)
    WindowPolygon(win, points,
       0x000000, 0, 1, -- pen (solid, width 1)
       0x000000, 0, -- brush (solid)
       true, -- close
       false) -- alt fill
  else
    -- draw top scroll button unpressed
    WindowRectOp(win, 5, (config.width-SCROLL_BAR_WIDTH), TITLE_HEIGHT, config.width, TITLE_HEIGHT+SCROLL_BAR_WIDTH, 5, 15 + 0x800)
    points = string.format("%i,%i,%i,%i,%i,%i", (config.width-SCROLL_BAR_WIDTH)+3, TITLE_HEIGHT+9,(config.width-SCROLL_BAR_WIDTH)+7, TITLE_HEIGHT+5,(config.width-SCROLL_BAR_WIDTH)+11, TITLE_HEIGHT+9)
    WindowPolygon(win, points,
      0x000000, 0, 1,   -- pen (solid, width 1)
      0x000000, 0, --brush (solid)
      true, --close
      false)  --alt fill
  end
    
  if (keep_scrolling == "scroll_down") then
    -- draw bottom scroll button pressed
    WindowRectOp(win, 5, (config.width-SCROLL_BAR_WIDTH), config.height-(SCROLL_BAR_WIDTH*2), 0, config.height-SCROLL_BAR_WIDTH-1, 10,  15 + 0x800) 
    points = string.format("%i,%i,%i,%i,%i,%i", (config.width-SCROLL_BAR_WIDTH)+3, (config.height-SCROLL_BAR_WIDTH)-11,(config.width-SCROLL_BAR_WIDTH)+7, (config.height-SCROLL_BAR_WIDTH)-7, (config.width-SCROLL_BAR_WIDTH)+11,(config.height-SCROLL_BAR_WIDTH)-11)
    WindowPolygon(win, points,
        0x000000, 0, 1, -- pen (solid, width 1)
        0x000000, 0, -- brush (solid)
        true, -- close
        false) -- alt fill
  else
    -- draw bottom scroll button unpressed
    WindowRectOp(win, 5, (config.width-SCROLL_BAR_WIDTH), config.height-(SCROLL_BAR_WIDTH*2), config.width, config.height-SCROLL_BAR_WIDTH, 5,  15 + 0x800)
    points = string.format("%i,%i,%i,%i,%i,%i", (config.width-SCROLL_BAR_WIDTH)+3, (config.height-SCROLL_BAR_WIDTH)-11,(config.width-SCROLL_BAR_WIDTH)+7, (config.height-SCROLL_BAR_WIDTH)-7, (config.width-SCROLL_BAR_WIDTH)+11,(config.height-SCROLL_BAR_WIDTH)-11)
    WindowPolygon(win, points,
        0x000000, 0, 1,   -- pen (solid, width 1)
        0x000000, 0, --brush (solid)
        true, --close
        false) --alt fill
  end

  -- The scrollbar position indicator
  total_steps = #ships
  if (total_steps <= WINDOW_LINES-1) then
    total_steps = 1 
  end
  SCROLL_BAR_HEIGHT = (config.height-(3*SCROLL_BAR_WIDTH)-TITLE_HEIGHT)
  if (not drag_scrolling) then
    step_number = line_start-1
    bar_position = SCROLL_BAR_WIDTH +TITLE_HEIGHT+ ((SCROLL_BAR_HEIGHT/total_steps) * step_number)
    bar_size = (SCROLL_BAR_HEIGHT/math.max(WINDOW_LINES-1,total_steps)) * (WINDOW_LINES-1)
    if bar_size < 10 then
        bar_size = 10
    end
    if bar_position+bar_size > SCROLL_BAR_WIDTH+TITLE_HEIGHT+SCROLL_BAR_HEIGHT then
        bar_position = SCROLL_BAR_WIDTH+TITLE_HEIGHT+SCROLL_BAR_HEIGHT - bar_size
    end
    WindowAddHotspot(win, "scroller", (config.width-SCROLL_BAR_WIDTH), bar_position, config.width, bar_position+bar_size, "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 1, 0)
    WindowDragHandler(win, "scroller", "ScrollerMoveCallback", "ScrollerReleaseCallback", 0)
  end
  WindowRectOp(win, 5, (config.width-SCROLL_BAR_WIDTH), bar_position, config.width, bar_position+bar_size, 5, 15 + 0x800) -- scrollbar position indicator
  

end

function drawWindow()
  debug("drawWindow")
  WindowCreate(win, windowinfo.window_left, windowinfo.window_top, config.width, config.height,windowinfo.window_mode, windowinfo.window_flags, ColourNameToRGB("black")) -- create window
  WindowFont (win, font, "Lucida Console", 9)
  WindowRectOp(win, 5, 0, 0, 0, 0, 5, 15 + 0x1000)
  --Title bar and drag handler
  WindowGradient(win, 2, 2, -2, 20, ColourNameToRGB("darkgray"), ColourNameToRGB("lightgray"), 2)
  WindowText(win, font, "Space HUD", 450, 5, 0, 20, ColourNameToRGB("black"))
  movewindow.add_drag_handler (win, 2, 2, -2, 20, miniwin.cursor_hand)
  --Exit button
  WindowText(win, font, "X", 920, 5, 0, 20, ColourNameToRGB("black"))
  WindowAddHotspot(win, "exitWindow", 920, 5, 0, 20, "", "", "hideWindow", "", "", "Close window", 1, 0)
  drawScrollbars()
  left_position = 5
  top_position = 25
  --Create the field names
  WindowText(win, font,
    "Type",
    left_position,
    top_position,
    left_position + ship_type_field_width + field_padding,
    top_position + text_height,
    ColourNameToRGB("limegreen")
  )
  WindowRectOp(win, 1, left_position - 3, top_position - 5, left_position + ship_type_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
  WindowAddHotspot(win, "shipTypeField", left_position, top_position, left_position + ship_type_field_width + field_padding, top_position + text_height, "", "", "sortShipType", "", "", "", 1, 0)
  left_position = left_position + ship_type_field_width + field_padding

  WindowText(win, font,
  "Name",
  left_position,
  top_position,
  left_position + ship_name_field_width + field_padding,
  top_position + text_height,
  ColourNameToRGB("limegreen")
  )
  WindowRectOp(win, 1, left_position - 3, top_position - 5, left_position + ship_name_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
  WindowAddHotspot(win, "shipNameField", left_position, top_position, left_position + ship_name_field_width + field_padding, top_position + text_height, "", "", "sortShipName", "", "", "", 1, 0)
  left_position = left_position + ship_name_field_width + field_padding

  WindowText(win, font,
  "X",
  left_position,
  top_position,
  left_position + ship_coordinate_field_width + field_padding,
  top_position + text_height,
  ColourNameToRGB("limegreen")
  )
  WindowRectOp(win, 1, left_position - 3, top_position - 5, left_position + ship_coordinate_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
  left_position = left_position + ship_coordinate_field_width + field_padding

  WindowText(win, font,
  "Y",
  left_position,
  top_position,
  left_position + ship_coordinate_field_width + field_padding,
  top_position + text_height,
  ColourNameToRGB("limegreen")
  )
  WindowRectOp(win, 1, left_position - 3, top_position - 5, left_position + ship_coordinate_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
  left_position = left_position + ship_coordinate_field_width + field_padding

  WindowText(win, font,
  "Z",
  left_position,
  top_position,
  left_position + ship_coordinate_field_width + field_padding,
  top_position + text_height,
  ColourNameToRGB("limegreen")
  )
  WindowRectOp(win, 1, left_position - 3, top_position - 5, left_position + ship_coordinate_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
  left_position = left_position + ship_coordinate_field_width + field_padding

  WindowText(win, font,
  "Proximity",
  left_position,
  top_position,
  left_position + ship_proximity_field_width + field_padding,
  top_position + text_height,
  ColourNameToRGB("limegreen")
  )
  WindowRectOp(win, 1, left_position - 3, top_position - 5, left_position + ship_proximity_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
  WindowAddHotspot(win, "shipProximityField", left_position, top_position, left_position + ship_proximity_field_width + field_padding, top_position + text_height, "", "", "sortShipProximity", "", "", "", 1, 0)
  left_position = left_position + ship_proximity_field_width + field_padding

  WindowText(win, font,
  "Position",
  left_position,
  top_position,
  left_position + ship_coordinate_field_width + field_padding,
  top_position + text_height,
  ColourNameToRGB("limegreen")
  )
  WindowRectOp(win, 1, left_position - 3, top_position - 5, left_position + ship_position_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
  WindowAddHotspot(win, "shipPositionField", left_position, top_position, left_position + ship_position_field_width + field_padding, top_position + text_height, "", "", "sortShipPosition", "", "", "", 1, 0)
  left_position = left_position + ship_position_field_width + field_padding

  WindowText(win, font,
  "Velocity",
  left_position,
  top_position,
  left_position + ship_velocity_field_width + field_padding,
  top_position + text_height,
  ColourNameToRGB("limegreen")
  )
  WindowRectOp(win, 1, left_position - 3, top_position - 5, left_position + ship_velocity_field_width + field_padding - 1, top_position + text_height, ColourNameToRGB("white"))
  WindowAddHotspot(win, "shipVelocityField", left_position, top_position, left_position + ship_velocity_field_width + field_padding, top_position + text_height, "", "", "sortShipVelocity", "", "", "", 1, 0)
  left_position = left_position + ship_velocity_field_width + field_padding

  top_position = top_position + text_height
  if hide_window == 0 then
    showWindow()
  end
end

function hideWindow()
  debug("hideWindow")
  hide_window = 1
  WindowShow (win, false)
end

function showWindow()
  debug("showWindow")
  hide_window = 0
  WindowShow (win, true)
end

function dumpShips()
  print("Ships:")
  tprint(ships)
  print("\nShip_Candidates:")
  tprint(ship_candidates)
  print("\nMy_Coordinates")
  tprint(my_ship)
end

function clearShips()
  debug("Clearing ships..")
  ships = {}
  ship_candidates = {}
  updateHud()
end

--Check to see if this ship exists in the ships table before we go 
--trying to shove shit into an uninstantiated data structure.
function lookupShip(ship)
  if ship_candidates[ship] == nil then
    ship_candidates[ship] = {}
  end 
end

function removeShip(ship)
  debug("removeShip:"..ship)
  if ships[ship] ~= nil then
    ships[ship] = nil
  end
  --updateHud()
end

function addShip(ship)
  debug("addShip fired")
  --Placeholders for clarity and to prevent calling unitiatlized variables if we're missing that information.
  ships[ship.name] = {name = '?', type = '?', x = '?', y = '?', z = '?', proximity = '?', position = '?', velocity = '?'}
  if ship.name then
    ships[ship.name].name = ship.name
  end
  if ship.type then
    ships[ship.name].type = ship.type
  end
  if ship.x then
    ships[ship.name].x = ship.x
  end
  if ship.y then
    ships[ship.name].y = ship.y
  end
  if ship.z then
    ships[ship.name].z = ship.z
  end
  if ship.proximity then
    ships[ship.name].proximity = ship.proximity
  end
  if ship.position then
    ships[ship.name].position = ship.position
  end
  if ship.velocity then
    ships[ship.name].velocity = ship.velocity
  end
end

function updateShip(ship)
  debug("Calling updateShip")
  for attribute in pairs(ship) do
    debug("attribute:"..attribute)
    ships[ship.name][attribute] = ship[attribute]
  end
end

--Basically we compare the last full radar capture against our current data.
--if something exists in ships already, but it's not in shipCandidates, then
--that means it wasn't in the last scan and it should probably be removed.
function checkShips()
  debug("checkShips fired")
  if next(ship_candidates) then
    for ship_candidate in pairs(ship_candidates) do
      debug("Ship candidate:"..ship_candidate)
      if ships[ship_candidate] == nil then
        addShip(ship_candidates[ship_candidate])
      elseif ships[ship_candidate] ~= nil then
        updateShip(ship_candidates[ship_candidate])
      end
      for ship in pairs(ships) do
        if ship_candidates[ships[ship].name] == nil then
          removeShip(ships[ship].name)
        end
      end
    end
  else
    clearShips()
    updateHud()
  end
  debug("Exiting checkShips")
  ship_candidates = {}
end

function getProjectileName (projectile)
  debug("getProjectileName")
  if projectile == "A Heavy Rocket" then
    rocket_count = rocket_count + 1
    projectile_count = rocket_count
  elseif projectile == "A Concussion missile" then
    missile_count = missile_count + 1
    projectile_count = missile_count
  elseif projectile == "A Torpedo" then
    torpedo_count = torpedo_count + 1
    projectile_count = torpedo_count
  end
  projectile_name = projectile..projectile_count
  return projectile_name
end

function triggerMyShipUpdate(name, line, args, styles)
  debug("triggerMyShipUpdate")
  my_ship.x = args.ship_x
  my_ship.y = args.ship_y
  my_ship.z = args.ship_z
end

function triggerLand()
  debug("triggerLand")
  WindowShow (win, false)
end

function triggerHyperspace()
  debug("triggerHypersapce")
end

function triggerShipExplodes(name, line, args, styles)
  debug("triggerShipExplodes")
  removeShip(args.ship_name)
  updateHud()
end

function triggerShipTractored(name, line, args, styles)
  debug("triggerShipTractored")
  removeShip(args.ship_name)
  updateHud()
end

function triggerShipLeavesSystem(name, line, args, styles)
  debug("triggerShipLeavesSystem")
  removeShip(args.ship_name)
  updateHud()
end

function triggerShipLands(name, line, args, styles)
  debug("triggerShipLands")
  removeShip(args.ship_name)
  updateHud()
end

function triggerMyShipEntersSystem(name, line, args, styles)
  debug("triggerMyShipEntersSystem")
  clearShips()
  updateHud()
end

function triggerShipEntersSystem(name, line, args, styles)
  debug("triggerShipEntersSystem")
  local ship = {}
  ship.type = args.ship_type
  ship.name = args.ship_name
  ship.x = args.ship_x
  ship.y = args.ship_y
  ship.z = args.ship_z
  addShip(ship)
  updateHud()
end

function triggerShipHangarLaunch(name, line, args, styles)
  debug("triggerShipHangarLaunch")
  local ship = {}
  ship.type = args.ship_type
  ship.name = args.ship_name
  ship.x = args.ship_x
  ship.y = args.ship_y
  ship.z = args.ship_z
  addShip(ship)
  updateHud()
end

function triggerShipHangarLand(name, line, args, styles)
  debug("triggerShipHangarLand")
  removeShip(args.ship_name)
  updateHud()
end

function triggerShipLaunches(name, line, args, styles)
  debug("triggerShipLaunches")
  local ship = {}
  ship.type = args.ship_type
  ship.name = args.ship_name
  ship.x = args.ship_x
  ship.y = args.ship_y
  ship.z = args.ship_z
  addShip(ship)
  updateHud()
end

function triggerMyShipLaunches()
  debug("triggerMyShipLaunches")
  clearShips()
  WindowShow (win, true)
end

--It just so happens that this string ends multiple space recon commands
--so we're going to use it as something of an "end case" for the capture.
function triggerMyCoordinates(name, line, args, styles)
  debug("triggerMyCoordinates")
  my_ship.x = args.my_x
  my_ship.y = args.my_y
  my_ship.z = args.my_z
  rocket_count = 0
  missile_count = 0
  torpedo_count = 0
  checkShips()
  updateHud()

end

function triggerShipRadar(name, line, args, styles)
  debug("triggerShipRadar")
  lookupShip(args.ship_name)
  ship_candidates[args.ship_name].type = args.ship_type
  ship_candidates[args.ship_name].name = args.ship_name
  ship_candidates[args.ship_name].x = args.ship_x
  ship_candidates[args.ship_name].y = args.ship_y
  ship_candidates[args.ship_name].z = args.ship_z
end

function triggerProjectileRadar(name, line, args, styles)
  debug("triggerProjectileRadar")
  --projectile_count = projectile_count + 1
  projectile_name = getProjectileName(args.ship_name)
  lookupShip(projectile_name)
  ship_candidates[projectile_name].type = "Projectile"
  ship_candidates[projectile_name].name = projectile_name
  ship_candidates[projectile_name].x = args.ship_x
  ship_candidates[projectile_name].y = args.ship_y
  ship_candidates[projectile_name].z = args.ship_z
end

function triggerFleetRadar(name, line, args, styles)
  debug("triggerFleetRadar")
  lookupShip(args.ship_name)
  ship_candidates[args.ship_name].type = args.ship_type
  ship_candidates[args.ship_name].name = args.ship_name
  ship_candidates[args.ship_name].x = args.ship_x
  ship_candidates[args.ship_name].y = args.ship_y
  ship_candidates[args.ship_name].z = args.ship_z
  ship_candidates[args.ship_name].position = args.ship_position
  --Check to see if they were part of a battlegroup
  if args.ship_leader_name ~= '' then
    ship_candidates[args.ship_name].leader_type = args.ship_leader_type
    ship_candidates[args.ship_name].leader_name = args.ship_leader_name
  end
end

function triggerShipProximity(name, line, args, styles)
  debug("triggerShipProximity")
  lookupShip(args.ship_name)
  ship_candidates[args.ship_name].type = args.ship_type
  ship_candidates[args.ship_name].name = args.ship_name
  ship_candidates[args.ship_name].proximity = args.ship_proximity
end

function triggerProjectileProximity(name, line, args, styles)
  debug("triggerProjectileProximity")
  projectile_name = getProjectileName(args.ship_name)
  lookupShip(projectile_name)
  ship_candidates[projectile_name].type = "Projectile"
  ship_candidates[projectile_name].name = projectile_name
  ship_candidates[projectile_name].proximity = args.ship_proximity
end

function triggerShipVelocity(name, line, args, styles)
  debug("triggerShipVelocity")
  lookupShip(args.ship_name)
  ship_candidates[args.ship_name].type = args.ship_type
  ship_candidates[args.ship_name].name = args.ship_name
  ship_candidates[args.ship_name].velocity = args.ship_velocity
end

function triggerProjectileVelocity(name, line, args, styles)
  debug("triggerProjectileVelocity")
  projectile_name = getProjectileName(args.ship_name)
  lookupShip(projectile_name)
  ship_candidates[projectile_name].type = "Projectile"
  ship_candidates[projectile_name].name = projectile_name
  ship_candidates[projectile_name].velocity = args.ship_velocity
end

function triggerProximityAlert(name, line, args, styles)
  debug("triggerProximityAlert")
  local ship = {}
  ship.name = args.ship_name
  ship.type = args.ship_type
  ship.x = args.ship_x
  ship.y = args.ship_y
  ship.z = args.ship_z
  if ships[args.ship_name] == nil then
    addShip(ship)
  else
    updateShip(ship)
  end
  updateHud()
end

function OnPluginInstall()
  windowinfo = movewindow.install (win, 7)  -- default to 7 (on right, center top/bottom)
  ColourNote ("black", "yellow", "            You are using SpaceHud                ")
  ColourNote ("black", "yellow", "    Type 'spacehelp' for help getting started     ")
  drawWindow()
end

function OnPluginClose ()
  WindowShow (win, false)
end

function OnPluginSaveState()
  movewindow.save_state(win)
end

function OnHelp ()
  world.Note (world.GetPluginInfo(world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
